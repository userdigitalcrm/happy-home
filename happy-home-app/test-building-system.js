#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const fetch = require('node-fetch');

const prisma = new PrismaClient();

async function testBuildingReferenceSystem() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∑–¥–∞–Ω–∏–π...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const districts = await prisma.district.findMany();
    console.log(`   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ —Ä–∞–π–æ–Ω–æ–≤: ${districts.length}`);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∑–¥–∞–Ω–∏–π
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∑–¥–∞–Ω–∏–π...');
    const buildings = await prisma.building.findMany({
      include: {
        district: true
      }
    });
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: ${buildings.length}`);

    if (buildings.length === 0) {
      console.log('   ‚ö†Ô∏è  –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø—É—Å—Ç! –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ä–∞–π–æ–Ω –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫
      let petropavlovsk = districts.find(d => d.name === '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫');
      if (!petropavlovsk) {
        petropavlovsk = await prisma.district.create({
          data: {
            name: '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫',
            description: '–ì–æ—Ä–æ–¥ –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫, –°–µ–≤–µ—Ä–æ-–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            isActive: true
          }
        });
        console.log('   ‚úÖ –°–æ–∑–¥–∞–Ω —Ä–∞–π–æ–Ω –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ
      const testBuilding = await prisma.building.create({
        data: {
          districtId: petropavlovsk.id,
          street: '–ê–±–∞—è',
          houseNumber: '102',
          fullAddress: '–ê–±–∞—è, 102',
          totalFloors: 5,
          yearBuilt: 1980,
          wallMaterial: '–ü–∞–Ω–µ–ª—å',
          entranceCount: 12,
          buildingType: '–∂–∏–ª–æ–π',
          hasElevator: true,
          dataSource: 'test',
          confidenceLevel: 'HIGH',
          isVerified: false,
          isActive: true
        }
      });
      
      console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ: ${testBuilding.fullAddress}`);
    } else {
      console.log('   üìã –ü—Ä–∏–º–µ—Ä—ã –∑–¥–∞–Ω–∏–π –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ:');
      buildings.slice(0, 3).forEach(building => {
        console.log(`      - ${building.fullAddress} (${building.district.name}, ${building.yearBuilt || '–≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'})`);
      });
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –ø–æ–∏—Å–∫–∞ –∑–¥–∞–Ω–∏–π
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–∏—Å–∫–∞ –∑–¥–∞–Ω–∏–π...');
    
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ HTTP –≤—ã–∑–æ–≤–∞)
      const searchResults = await prisma.building.findMany({
        where: {
          OR: [
            {
              fullAddress: {
                contains: '–ê–±–∞—è',
                mode: 'insensitive'
              }
            },
            {
              street: {
                contains: '–ê–±–∞—è',
                mode: 'insensitive'
              }
            }
          ],
          isActive: true
        },
        include: {
          district: true
        },
        take: 5
      });

      if (searchResults.length > 0) {
        console.log(`   ‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É "–ê–±–∞—è": ${searchResults.length}`);
        searchResults.forEach(building => {
          console.log(`      üìç ${building.fullAddress} - ${building.yearBuilt || '–≥–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}, ${building.wallMaterial || '–º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
        });
      } else {
        console.log('   ‚ùå –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ API –ø–æ–∏—Å–∫–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è...');
    const buildingsWithData = await prisma.building.findMany({
      where: {
        AND: [
          { yearBuilt: { not: null } },
          { wallMaterial: { not: null } },
          { totalFloors: { not: null } }
        ]
      }
    });

    console.log(`   ‚úÖ –ó–¥–∞–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ${buildingsWithData.length}`);
    
    if (buildingsWithData.length > 0) {
      const sample = buildingsWithData[0];
      console.log(`   üìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${sample.fullAddress}`);
      console.log(`      - –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: ${sample.yearBuilt}`);
      console.log(`      - –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω: ${sample.wallMaterial}`);
      console.log(`      - –≠—Ç–∞–∂–Ω–æ—Å—Ç—å: ${sample.totalFloors}`);
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìù –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:');
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev');
    console.log('   2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞');
    console.log('   3. –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ê–±–∞—è")');
    console.log('   4. –í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞');
    console.log('   5. –ü–æ–ª—è –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npx prisma db push');
    console.log('   3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç: npx prisma generate');
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testBuildingReferenceSystem()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = testBuildingReferenceSystem;