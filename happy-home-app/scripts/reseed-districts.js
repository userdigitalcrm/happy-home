const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞
const districtNames = [
  '–í–æ–∫–∑–∞–ª', '–ü–æ–¥–≥–æ—Ä–∞', '–†–∞—Ö–º–µ—Ç', '20 –ú–∫—Ä', '–ö–æ–ª—Ö–æ–∑–Ω—ã–π', '–ë–µ–Ω–∑–æ—Å—Ç—Ä–æ–π',
  '2 –ì–æ—Ä –ë–æ–ª', '–°–∫–∏—Ñ', '–î–ë–°', '–í–í–ò', '–°–µ–≤–µ—Ä–Ω—ã–π', '–†–∞–±–æ—á–∏–π',
  '19 –ú–∫—Ä', '–ê–∑–∏—è', '–ë—É—Ä–∞—Ç–∏–Ω–æ', '–ì–æ—Ä–æ—Ç–¥–µ–ª', '–î–°–†', '–£—é—Ç',
  '–û–∫–µ–∞–Ω', '8 –®–∫–æ–ª–∞', '–î–û–ë', '–î–µ–ª—å—Ñ–∏–Ω', '17 –®–∫–æ–ª–∞', '–ù–æ–≤—ã–π –¶–û–¢',
  '–°–æ–∫–æ–ª', '–ê—Ç–ª–∞–Ω—Ç–∏–¥–∞', '–¢–∞–π–≥–∞', '–ë–µ—Ä—ë–∑–∫–∞', '3 –ì–æ—Ä –ë–æ–ª', '–ß–µ—Ä–µ–º—É—à–∫–∏',
  '–ö–∞–∑–∞—Ö—Ç–µ–ª–µ–∫–æ–º', '–ú–∞—Å—Ç–µ—Ä', '–¶–û–ù', '–î–æ—à–∫–æ–ª—å–Ω–∏–∫', '–†–∞—Ö–∞—Ç', '–ù–æ–≤–∞—è –ú–µ—á–µ—Ç—å',
  '–ë—ç—Å—Ç', '3 –ë–∞–Ω—è', '–°–ö–ì–£', '–ê—Ö—Ç–∞–º–∞—Ä', '–î–∏–Ω–∞–º–æ', '–†–∞–¥—É–∂–Ω—ã–π',
  '–ú—è—Å–æ–∫–æ–º–±–∏–Ω–∞—Ç', '–ë–æ—Ä–∫–∏', '–°—Ç–∞—Ä—Ç', '–î—Ä–∞–º –¢–µ–∞—Ç—Ä –ü–æ–≥–æ–¥–∏–Ω–∞', '–î–æ—Å—Ç—ã–∫ –ú–æ–ª–ª',
  '7 –®–∫–æ–ª–∞', '–ì–æ—Ä –ü–∞—Ä–∫'
];

async function seedDistricts() {
  console.log('üå± Seeding districts...');

  try {
    // Create districts sequentially to avoid connection pool timeout
    const districts = [];
    
    for (const name of districtNames) {
      try {
        const district = await prisma.district.upsert({
          where: { name },
          update: {},
          create: { 
            name, 
            description: `${name} —Ä–∞–π–æ–Ω`,
            isActive: true
          }
        });
        
        districts.push(district);
        console.log(`‚úÖ Created/updated district: ${name}`);
      } catch (error) {
        console.error(`‚ùå Error creating district ${name}:`, error.message);
      }
    }

    console.log(`‚úÖ Successfully processed ${districts.length} districts`);

  } catch (error) {
    console.error('‚ùå Error seeding districts:', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedDistricts();