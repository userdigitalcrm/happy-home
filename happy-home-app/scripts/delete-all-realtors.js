const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function deleteAllRealtors() {
  console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–†–ò–≠–õ–¢–û–†"...');
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –†–ò–≠–õ–¢–û–†
    const realtorCategory = await prisma.category.findUnique({
      where: { name: '–†–ò–≠–õ–¢–û–†' }
    });
    
    if (!realtorCategory) {
      console.error('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–†–ò–≠–õ–¢–û–†" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      return;
    }
    
    console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–†–ò–≠–õ–¢–û–†" –Ω–∞–π–¥–µ–Ω–∞ —Å ID: ${realtorCategory.id}`);
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const deleteResult = await prisma.property.deleteMany({
      where: {
        categoryId: realtorCategory.id
      }
    });
    
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.count} –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–†–ò–≠–õ–¢–û–†"`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
deleteAllRealtors();