const fs = require('fs');
const { PrismaClient } = require('@prisma/client');
const path = require('path');
const csv = require('csv-parser');
const prisma = new PrismaClient();

// –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
const CSV_FILE_PATH = 'c:/Users/donpa/Desktop/happy-home/phones_clean_utf8_bom.csv';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function normalizePhone(phone) {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
  let normalized = phone.replace(/\D/g, '');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä
  if (normalized.length >= 10) {
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏–ª–∏ 7, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ 87XXXXXXXXXX
    if (normalized.startsWith('8') || normalized.startsWith('7')) {
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 87
      if (normalized.startsWith('8') && normalized.length >= 11) {
        return normalized.substring(0, 11); // 87XXXXXXXXX
      } else if (normalized.startsWith('7') && normalized.length >= 10) {
        return `8${normalized.substring(0, 10)}`; // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 7XXX –≤ 87XXX
      }
    }
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É
  return normalized;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
function extractNameFromString(str) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∏–º—è –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const parts = str.split(' ');
  
  if (parts.length > 1) {
    // –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–µ–Ω–µ–º
    return parts.slice(1).join(' ').trim();
  }
  
  return null;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importRieltorPhones() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Ä–∏—ç–ª—Ç–æ—Ä–æ–≤...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –†–ò–≠–õ–¢–û–†
    const realtorCategory = await prisma.category.findUnique({
      where: { name: '–†–ò–≠–õ–¢–û–†' }
    });
    
    if (!realtorCategory) {
      console.error('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–†–ò–≠–õ–¢–û–†" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      return;
    }
    
    console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–†–ò–≠–õ–¢–û–†" –Ω–∞–π–¥–µ–Ω–∞ —Å ID: ${realtorCategory.id}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    const adminUser = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    });
    
    if (!adminUser) {
      console.error('‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }
    
    console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω —Å ID: ${adminUser.id}`);
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const phones = [];
    let processedCount = 0;
    let skippedCount = 0;
    let createdCount = 0;
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —á–∏—Ç–∞—Ç–µ–ª—å CSV
    fs.createReadStream(CSV_FILE_PATH)
      .pipe(csv({
        separator: ',',
        headers: ['phone'],
        skipLines: 1
      }))
      .on('data', (data) => {
        phones.push(data.phone);
      })
      .on('end', async () => {
        console.log(`üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ ${phones.length} —Å—Ç—Ä–æ–∫ –∏–∑ CSV —Ñ–∞–π–ª–∞`);
        
        for (const phoneData of phones) {
          try {
            processedCount++;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if (!phoneData || phoneData.trim() === '') {
              skippedCount++;
              continue;
            }
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ
            let name = null;
            let phoneNumber = phoneData;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–±–µ–ª—ã (–≤–æ–∑–º–æ–∂–Ω–æ–µ –∏–º—è)
            if (phoneData.includes(' ')) {
              const nameMatch = extractNameFromString(phoneData);
              if (nameMatch) {
                name = nameMatch;
                // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                phoneNumber = phoneData.split(' ')[0];
              }
            }
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            const normalizedPhone = normalizePhone(phoneNumber);
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
            if (!normalizedPhone || normalizedPhone.length < 10) {
              skippedCount++;
              continue;
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª–µ–π
            await prisma.property.create({
              data: {
                categoryId: realtorCategory.id,
                phone: normalizedPhone,
                description: name,
                status: 'ACTIVE',
                createdById: adminUser.id
              }
            });
            createdCount++;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
            if (processedCount % 100 === 0) {
              console.log(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –∏–∑ ${phones.length} –∑–∞–ø–∏—Å–µ–π`);
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ '${phoneData}':`, error);
            skippedCount++;
          }
        }
        
        console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:`);
        console.log(`- –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}`);
        console.log(`- –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${createdCount}`);
        console.log(`- –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
        
        await prisma.$disconnect();
      });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importRieltorPhones();