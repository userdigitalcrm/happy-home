generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  name               String?
  role               UserRole          @default(AGENT)
  isActive           Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  lastLoginAt        DateTime?
  password           String?
  accounts           Account[]
  callAssignments    CallAssignment[]  @relation("CallAssignmentAgent")
  createdProperties  Property[]        @relation("PropertyCreator")
  assignedProperties Property[]        @relation("PropertyAssignee")
  propertyHistories  PropertyHistory[]
  sessions           Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Property {
  id              String            @id @default(cuid())
  categoryId      String
  districtId      String?
  buildingId      String?
  apartment       String?
  floor           Int?
  totalArea       Float?
  livingArea      Float?
  kitchenArea     Float?
  rooms           Int?
  ceilingHeight   Float?
  balcony         String?
  loggia          Boolean?          @default(false)
  layout          String?
  totalFloors     Int?
  wallMaterial    String?
  condition       String?
  yearBuilt       Int?
  phone           String?
  source          String?
  renovation      String?           @default("NONE")
  pField          String?
  price           Float?
  pricePerSqm     Float?
  currency        String            @default("KZT")
  status          PropertyStatus    @default(ACTIVE)
  isArchived      Boolean           @default(false)
  description     String?
  notes           String?
  createdById     String
  assignedToId    String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  callAssignments CallAssignment[]
  district        District?         @relation(fields: [districtId], references: [id])
  createdBy       User              @relation("PropertyCreator", fields: [createdById], references: [id])
  building        Building?         @relation(fields: [buildingId], references: [id])
  assignedTo      User?             @relation("PropertyAssignee", fields: [assignedToId], references: [id])
  category        Category          @relation(fields: [categoryId], references: [id])
  histories       PropertyHistory[]
  photos          PropertyPhoto[]

  @@index([isArchived])
  @@map("properties")
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  properties  Property[]

  @@map("categories")
}

model District {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  buildings   Building[]
  properties  Property[]

  @@map("districts")
}

model Building {
  id              String          @id @default(cuid())
  districtId      String
  street          String
  houseNumber     String
  fullAddress     String
  totalFloors     Int?
  yearBuilt       Int?
  wallMaterial    String?
  entranceCount   Int?
  buildingType    String?
  layout          String?
  hasElevator     Boolean         @default(false)
  hasGarbageChute Boolean         @default(false)
  heatingType     String?
  latitude        Float?
  longitude       Float?
  dataSource      String?
  confidenceLevel ConfidenceLevel @default(MEDIUM)
  isVerified      Boolean         @default(false)
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  district        District        @relation(fields: [districtId], references: [id])
  properties      Property[]

  @@unique([districtId, street, houseNumber])
  @@index([street, houseNumber])
  @@index([fullAddress])
  @@map("buildings")
}

model PropertyPhoto {
  id         String   @id @default(cuid())
  propertyId String
  filename   String
  url        String
  caption    String?
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_photos")
}

model PropertyHistory {
  id         String         @id @default(cuid())
  propertyId String
  userId     String
  action     PropertyAction
  field      String?
  oldValue   String?
  newValue   String?
  notes      String?
  createdAt  DateTime       @default(now())
  user       User           @relation(fields: [userId], references: [id])
  property   Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_histories")
}

model CallAssignment {
  id         String   @id @default(cuid())
  propertyId String
  agentId    String
  isCalled   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation("CallAssignmentAgent", fields: [agentId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])

  @@map("call_assignments")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum UserRole {
  ADMIN
  MANAGER
  AGENT
  USER
}

enum PropertyStatus {
  ACTIVE
  RESERVED
  SOLD
  RENTED
  SUSPENDED
}

enum PropertyAction {
  CREATED
  UPDATED
  ARCHIVED
  RESTORED
  STATUS_CHANGED
  ASSIGNED
  PRICE_CHANGED
}

enum ConfidenceLevel {
  LOW
  MEDIUM
  HIGH
}
